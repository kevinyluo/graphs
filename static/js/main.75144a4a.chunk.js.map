{"version":3,"sources":["components/graphContext.js","components/canvas/canvas.js","components/graphSettings/graphSettings.js","components/graphData/graphData.js","App.js","reportWebVitals.js","index.js"],"names":["GraphContext","createContext","GraphProvider","props","useState","nodeList","setNodeList","edgeList","setEdgeList","Provider","value","children","CANVAS_WIDTH","window","innerWidth","CANVAS_HEIGHT","innerHeight","RADIUS","nodeCount","previousNode","currentNode","Canvas","useContext","getEdgePoints","startNode","endNode","slope","y","x","norm","Math","abs","theta","atan","startNodeOffsetX","cos","startNodeOffsetY","sin","phi","PI","endNodeOffsetX","endNodeOffsetY","startNodeID","id","endNodeID","startX","startY","endX","endY","width","height","onClick","e","evt","button","location","currentTarget","getStage","_changedPointerPositions","posX","posY","selectedNode","i","length","dict","sqrt","pow","copyEdgeList","copyNodeList","Object","assign","edgeID","toString","edges","push","prevNodeList","points","stroke","strokeWidth","closed","map","node","draggable","onDragMove","newX","newY","forEach","edge","otherNodeID","updateNodeLocation","target","index","attrs","dragBoundFunc","pos","STAGE_X","radius","align","fontStyle","text","values","graphSettings","state","directionality","graphWeight","indexType","getDirectionality","console","log","changeDirectionality","setState","changeGraphWeight","changeindexType","className","ToggleButtonGroup","type","this","onChange","ToggleButton","size","variant","Component","GraphData","Table","striped","bordered","hover","Array","from","_","App","weight","CardColumns","Card","style","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.75144a4a.chunk.js","sourcesContent":["import React, {useState, createContext} from 'react';\r\n\r\nexport const GraphContext = createContext();\r\n\r\nexport const GraphProvider = (props) => {\r\n    const [nodeList, setNodeList] = useState([])\r\n    const [edgeList, setEdgeList] = useState({})\r\n\r\n    return(\r\n        <GraphContext.Provider value={[nodeList, setNodeList, edgeList, setEdgeList]}>\r\n            {props.children}\r\n        </GraphContext.Provider>\r\n    );\r\n}","import './canvas.css';\r\nimport React, { Component, useContext} from 'react';\r\nimport { Stage, Layer, Text, Circle, Line, Group} from 'react-konva';\r\nimport {GraphContext} from '../graphContext'\r\n\r\nconst CANVAS_WIDTH=window.innerWidth/2\r\nconst CANVAS_HEIGHT=window.innerHeight*0.8\r\nconst RADIUS=15//window.innerHeight*window.innerWidth/120000\r\nconst STAGE_X= 0\r\nconst STAGE_Y= 0\r\n\r\nvar nodeCount = -1\r\nvar previousNode=null\r\nvar currentNode=null\r\n\r\nconst Canvas = () => {\r\n\r\n  const [nodeList, setNodeList, edgeList, setEdgeList] = useContext(GraphContext)\r\n\r\n  // When a node is dragged or its location changes, update its coordinates, and redraw its edges\r\n  const updateNodeLocation = (id, newX, newY) => {\r\n    var copyEdgeList = {}\r\n    var copyNodeList = [...nodeList]\r\n    Object.assign(copyEdgeList, edgeList)\r\n\r\n    const node=copyNodeList[id]\r\n    const edges=node['edges']\r\n    // Update the coordinates of the node\r\n    node['x'] = newX\r\n    node['y'] = newY\r\n    // Update the points of each of the edges touching this node\r\n    edges.forEach(edge => {\r\n      const otherNodeID = copyEdgeList[edge].endNodeID === id ? copyEdgeList[edge].startNodeID : copyEdgeList[edge].endNodeID\r\n      const points = getEdgePoints(node, copyNodeList[otherNodeID])\r\n      copyEdgeList[edge].startX = points.startX\r\n      copyEdgeList[edge].startY = points.startY\r\n      copyEdgeList[edge].endX = points.endX\r\n      copyEdgeList[edge].endY = points.endY\r\n    })\r\n    setNodeList([...copyNodeList])\r\n    setEdgeList(copyEdgeList)\r\n  }\r\n\r\n  // Add a new node\r\n  const addNode = (e) => {\r\n    if(e.evt.button != 0)\r\n      return\r\n    // Get the location of the cursor\r\n    const stage = e.currentTarget.getStage()\r\n    const location = stage._changedPointerPositions[0]\r\n    const posX = location.x\r\n    const posY = location.y\r\n    \r\n    // Exit if the user clicked outside of the canvas\r\n    if(posX > CANVAS_WIDTH || posY > CANVAS_HEIGHT)\r\n      return\r\n\r\n    // Detect if an existing node has been clicked\r\n    var selectedNode = null\r\n    for (var i = 0; i < nodeList.length; i++){\r\n      const dict=nodeList[i]\r\n      var x = dict.x\r\n      var y = dict.y\r\n      var dist = Math.sqrt(Math.pow(posX-x, 2) + Math.pow(posY-y, 2))\r\n      if(dist < RADIUS*1.5){\r\n        selectedNode = true\r\n        if(currentNode != null)\r\n          previousNode=currentNode\r\n        currentNode = dict.id\r\n        break\r\n      }\r\n    }\r\n\r\n    // If no node has been selected, add a node\r\n    if(!selectedNode){\r\n      nodeCount += 1\r\n      setNodeList(prevNodeList => [...prevNodeList, {id: nodeCount, x: posX, y: posY, edges: []}])\r\n      previousNode=null;\r\n    }\r\n    else{\r\n      // Add an edge\r\n      if(previousNode !== null && currentNode !== previousNode){\r\n        var copyEdgeList = {}\r\n        var copyNodeList = [...nodeList]\r\n        Object.assign(copyEdgeList, edgeList)\r\n\r\n        const startNode = copyNodeList[previousNode]\r\n        const endNode = copyNodeList[currentNode]\r\n        const edgeID = startNode.id.toString() + endNode.id.toString()\r\n\r\n        copyEdgeList[edgeID] = (getEdgePoints(startNode, endNode))\r\n        // Add the edgeID to the list of edges in both the nodes\r\n        startNode.edges.push(edgeID)\r\n        endNode.edges.push(edgeID)\r\n        setNodeList([...copyNodeList])\r\n        setEdgeList(copyEdgeList)\r\n\r\n        //clear all selected nodes\r\n        previousNode=null\r\n        currentNode=null\r\n      }\r\n\r\n    }\r\n  }\r\n\r\n  // Given a start node and an end node, return a dictionary of the points to draw an edge\r\n  const getEdgePoints = (startNode, endNode) =>{\r\n    //find slope\r\n    const slope = (endNode.y - startNode.y)/(endNode.x-startNode.x)\r\n    const norm = (endNode.x-startNode.x)/Math.abs(endNode.x-startNode.x)\r\n\r\n    const theta = Math.atan(slope)\r\n    const startNodeOffsetX = Math.cos(theta)*RADIUS*norm\r\n    const startNodeOffsetY = Math.sin(theta)*RADIUS*norm\r\n\r\n    const phi = Math.PI/2 - theta\r\n    const endNodeOffsetX = Math.cos(phi)*RADIUS*norm\r\n    const endNodeOffsetY = Math.sin(phi)*RADIUS*norm\r\n\r\n    return {startNodeID: startNode.id, endNodeID: endNode.id, startX: startNode.x + startNodeOffsetX, startY: startNode.y + startNodeOffsetY, endX: endNode.x - endNodeOffsetY, endY: endNode.y - endNodeOffsetX}\r\n  }\r\n\r\n\r\n  return (\r\n      <div>\r\n        <Stage \r\n          width={window.innerWidth} height={window.innerHeight} x={STAGE_X} y={STAGE_Y} onClick={addNode}>\r\n          {/* Outline the canvas */}\r\n          <Layer>\r\n            <Line\r\n              points={[0, 0, CANVAS_WIDTH, 0, CANVAS_WIDTH, CANVAS_HEIGHT, 0, CANVAS_HEIGHT]}\r\n              stroke=\"black\"\r\n              strokeWidth={1}\r\n              closed/>\r\n          </Layer>\r\n\r\n          {/* Draw all the nodes in current state */}\r\n          <Layer>\r\n            {nodeList.map((node) => (\r\n              <Group\r\n                x={node.x}\r\n                y={node.y}\r\n                draggable\r\n                onDragMove={(e) => {\r\n                  updateNodeLocation(e.target.index, e.target.attrs.x, e.target.attrs.y)\r\n                }}\r\n                dragBoundFunc={ function (pos) {\r\n                  var newY = pos.y < RADIUS ? RADIUS : pos.y > STAGE_Y + CANVAS_HEIGHT - RADIUS ? STAGE_Y + CANVAS_HEIGHT - RADIUS : pos.y;\r\n                  var newX = pos.x > STAGE_X + CANVAS_WIDTH - RADIUS ? STAGE_X + CANVAS_WIDTH - RADIUS : pos.x < STAGE_X + RADIUS ? STAGE_X + RADIUS :  pos.x;\r\n                  return {\r\n                    x: newX,\r\n                    y: newY,\r\n                  };\r\n                }}>\r\n              <Circle \r\n                radius={RADIUS} \r\n                stroke=\"black\"/>\r\n                <Text \r\n                x={-8}\r\n                y={-5}\r\n                align=\"center\"\r\n                width={RADIUS}\r\n                fontStyle=\"bold\"\r\n                text={node.id}/>\r\n                </Group>\r\n            ))}\r\n            {(Object.values(edgeList)).map((edge) => \r\n                <Line\r\n                  points={[edge.startX, edge.startY, edge.endX, edge.endY]}\r\n                  stroke='black'\r\n                  width={10}/>\r\n            )}\r\n          </Layer>\r\n        </Stage>\r\n      </div>\r\n\r\n    );\r\n\r\n}\r\n \r\nexport default Canvas;","import React, { Component } from 'react';\r\nimport { Button, ButtonGroup, ToggleButton, ToggleButtonGroup} from 'react-bootstrap';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport './graphSettings.css'\r\n\r\n\r\nclass graphSettings extends Component {\r\n    state = { directionality: 'undirected',\r\n              graphWeight: 'unweighted',\r\n              indexType: 'numberIndex'}\r\n\r\n    getDirectionality = (props) =>{\r\n        console.log(props)\r\n    }\r\n\r\n    render() { \r\n        return (\r\n            <div className=\"Spacer\">\r\n                <span>\r\n                    <ToggleButtonGroup type=\"checkbox\" value={this.state.directionality} onChange={this.changeDirectionality}>\r\n                        <ToggleButton size='sm' variant='dark' value={'undirected'}>Undirected</ToggleButton>\r\n                        <ToggleButton size='sm' variant='dark'value={'directed'}>Directed</ToggleButton>\r\n                    </ToggleButtonGroup>\r\n                </span>\r\n                <span>\r\n                    <ToggleButtonGroup type=\"checkbox\" value={this.state.graphWeight} onChange={this.changeGraphWeight}>\r\n                        <ToggleButton size='sm' variant='dark' value={'unweighted'}>Unweighted</ToggleButton>\r\n                        <ToggleButton size='sm' variant='dark'value={'weighted'}>weighted</ToggleButton>\r\n                    </ToggleButtonGroup>\r\n                </span>\r\n                <span>\r\n                    <ToggleButtonGroup type=\"checkbox\" value={this.state.indexType} onChange={this.changeindexType}>\r\n                        <ToggleButton size='sm' variant='dark' value={'numberIndex'}>Number Index</ToggleButton>\r\n                        <ToggleButton size='sm' variant='dark'value={'letterIndex'}>Letter Index</ToggleButton>\r\n                        <ToggleButton size='sm' variant='dark' value={'customindex'}>Custom Index</ToggleButton>\r\n                    </ToggleButtonGroup>    \r\n                </span>\r\n            </div>);\r\n    }\r\n\r\n    changeDirectionality = (e) => {\r\n        this.setState({ directionality: e[1] });\r\n    }\r\n\r\n    changeGraphWeight = (e) => {\r\n        this.setState({ graphWeight: e[1] });\r\n    }\r\n\r\n    changeindexType= (e) => {\r\n         \r\n    }\r\n}\r\n \r\nexport default graphSettings;","import React, { Component, useContext } from 'react';\r\nimport \"./graphData.css\"\r\nimport { Table, TabPane } from 'react-bootstrap';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport GraphSettings from '../graphSettings/graphSettings'\r\nimport {GraphContext} from '../graphContext'\r\n\r\n\r\nconst GraphData = () => {\r\n    const [nodeList, setNodeList, edgeList, setEdgeList] = useContext(GraphContext)\r\n\r\n        return (  \r\n            <Table striped bordered hover size=\"sm\">\r\n                <thead>\r\n                    <tr>\r\n                        <th>Vertex</th>\r\n                        <th>Edges</th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                {Array.from({ length: nodeList.length }).map((_, index) => (\r\n                    <tr>\r\n                     <td >{index}</td>\r\n                     <td >1</td>\r\n                    </tr> \r\n                 ))}\r\n                </tbody>\r\n            </Table>\r\n        );\r\n}\r\n \r\nexport default GraphData;","import './App.css';\nimport React, { Component } from 'react';\nimport { Card, CardColumns } from 'react-bootstrap';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport Canvas from './components/canvas/canvas'\nimport GraphSettings from './components/graphSettings/graphSettings'\nimport GraphData from './components/graphData/graphData'\nimport {GraphProvider} from './components/graphContext'\n\n\nclass App extends Component {\n  state = {}\n\n  onGraphWeightChange(weight) {\n    this.setState({ graphWeight: weight })\n  }\n  \n  render() { \n    return (\n      <GraphProvider>\n        <div className=\"App\">\n        <span>\n          <GraphSettings ></GraphSettings>\n        </span>\n        <div className=\"Graph-data\">\n          <CardColumns>\n            <Card style={{ width: '20rem', height: \"78.5%\"}}>\n              <GraphData></GraphData>\n            </Card>\n            <Card style={{ width: \"50%\", height: \"78.5%\"}}>\n              <Canvas></Canvas>\n            </Card>\n          </CardColumns>\n        </div>\n      </div>\n      </GraphProvider>\n    )\n  }\n}\n \nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}