[{"C:\\Users\\kevin\\OneDrive\\Desktop\\CS\\graphs\\src\\index.js":"1","C:\\Users\\kevin\\OneDrive\\Desktop\\CS\\graphs\\src\\reportWebVitals.js":"2","C:\\Users\\kevin\\OneDrive\\Desktop\\CS\\graphs\\src\\App.js":"3","C:\\Users\\kevin\\OneDrive\\Desktop\\CS\\graphs\\src\\components\\canvas\\canvas.js":"4","C:\\Users\\kevin\\OneDrive\\Desktop\\CS\\graphs\\src\\components\\graphSettings\\graphSettings.js":"5","C:\\Users\\kevin\\OneDrive\\Desktop\\CS\\graphs\\src\\components\\graphData\\graphData.js":"6"},{"size":500,"mtime":1609810611477,"results":"7","hashOfConfig":"8"},{"size":362,"mtime":499162500000,"results":"9","hashOfConfig":"8"},{"size":972,"mtime":1609995714866,"results":"10","hashOfConfig":"8"},{"size":2043,"mtime":1609827045534,"results":"11","hashOfConfig":"8"},{"size":2286,"mtime":1609829313133,"results":"12","hashOfConfig":"8"},{"size":925,"mtime":1609908598057,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"1yyab5r",{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"21","messages":"22","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"23","usedDeprecatedRules":"16"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"26","usedDeprecatedRules":"16"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Users\\kevin\\OneDrive\\Desktop\\CS\\graphs\\src\\index.js",[],["29","30"],"C:\\Users\\kevin\\OneDrive\\Desktop\\CS\\graphs\\src\\reportWebVitals.js",[],"C:\\Users\\kevin\\OneDrive\\Desktop\\CS\\graphs\\src\\App.js",[],"C:\\Users\\kevin\\OneDrive\\Desktop\\CS\\graphs\\src\\components\\canvas\\canvas.js",["31","32","33"],"import './canvas.css';\r\nimport React, { Component } from 'react';\r\nimport { Stage, Layer, Rect, Text, Circle, Line, Star} from 'react-konva';\r\n\r\nconst CANVAS_WIDTH=window.innerWidth/2\r\nconst CANVAS_HEIGHT=window.innerHeight*0.8\r\nconst RADIUS=window.innerHeight*window.innerWidth/120000\r\nconst STAGE_X= 0 // window.innerWidth/4\r\nconst STAGE_Y= 0 //window.innerHeight/20\r\n\r\nfunction generateShapes() {\r\n  return [...Array(10)].map((_, i) => ({\r\n    id: i.toString(),\r\n    x: Math.random() * CANVAS_WIDTH,\r\n    y: Math.random() * CANVAS_HEIGHT + (window.innerHeight-CANVAS_HEIGHT),\r\n  }));\r\n}\r\n\r\nconst INITIAL_STATE = generateShapes();\r\n\r\nclass Canvas extends Component {\r\n  state = {initial: INITIAL_STATE}\r\n  render() { \r\n    return (\r\n      <div>\r\n        <Stage \r\n          width={window.innerWidth} height={window.innerHeight} x={STAGE_X} y={STAGE_Y}>\r\n          {/* Outline the canvas */}\r\n          <Layer>\r\n            <Line\r\n              points={[0, 0, CANVAS_WIDTH, 0, CANVAS_WIDTH, CANVAS_HEIGHT, 0, CANVAS_HEIGHT]}\r\n              stroke=\"black\"\r\n              strokeWidth={1}\r\n              closed/>\r\n          </Layer>\r\n\r\n          {/* Draw all the nodes in current state */}\r\n          <Layer>\r\n            {this.state['initial'].map((node) => (\r\n              <Circle \r\n                x={node.x} \r\n                y={node.y} \r\n                radius={RADIUS} \r\n                draggable\r\n                dragBoundFunc={ function (pos) {\r\n                  var newY = pos.y < STAGE_Y+RADIUS ? STAGE_Y+RADIUS : pos.y > STAGE_Y + CANVAS_HEIGHT - RADIUS ? STAGE_Y + CANVAS_HEIGHT - RADIUS : pos.y;\r\n                  var newX = pos.x > STAGE_X + CANVAS_WIDTH - RADIUS ? STAGE_X + CANVAS_WIDTH - RADIUS : pos.x < STAGE_X + RADIUS ? STAGE_X + RADIUS :  pos.x;\r\n                  return {\r\n                    x: newX,\r\n                    y: newY,\r\n                  };\r\n                }}\r\n              stroke=\"black\"/>\r\n            ))}\r\n          </Layer>\r\n        </Stage>\r\n      </div>\r\n\r\n    );\r\n  }\r\n}\r\n \r\nexport default Canvas;","C:\\Users\\kevin\\OneDrive\\Desktop\\CS\\graphs\\src\\components\\graphSettings\\graphSettings.js",["34","35"],"import React, { Component } from 'react';\r\nimport { Button, ButtonGroup, ToggleButton, ToggleButtonGroup} from 'react-bootstrap';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport './graphSettings.css'\r\n\r\n\r\nclass graphSettings extends Component {\r\n    state = { directionality: 'undirected',\r\n              graphWeight: 'unweighted',\r\n              indexType: 'numberIndex'}\r\n\r\n    getDirectionality = (props) =>{\r\n        console.log(props)\r\n    }\r\n\r\n    render() { \r\n        return (\r\n            <div className=\"Spacer\">\r\n                <span>\r\n                    <ToggleButtonGroup type=\"checkbox\" value={this.state.directionality} onChange={this.changeDirectionality}>\r\n                        <ToggleButton size='sm' variant='dark' value={'undirected'}>Undirected</ToggleButton>\r\n                        <ToggleButton size='sm' variant='dark'value={'directed'}>Directed</ToggleButton>\r\n                    </ToggleButtonGroup>\r\n                </span>\r\n                <span>\r\n                    <ToggleButtonGroup type=\"checkbox\" value={this.state.graphWeight} onChange={this.changeGraphWeight}>\r\n                        <ToggleButton size='sm' variant='dark' value={'unweighted'}>Unweighted</ToggleButton>\r\n                        <ToggleButton size='sm' variant='dark'value={'weighted'}>weighted</ToggleButton>\r\n                    </ToggleButtonGroup>\r\n                </span>\r\n                <span>\r\n                    <ToggleButtonGroup type=\"checkbox\" value={this.state.indexType} onChange={this.changeindexType}>\r\n                        <ToggleButton size='sm' variant='dark' value={'numberIndex'}>Number Index</ToggleButton>\r\n                        <ToggleButton size='sm' variant='dark'value={'letterIndex'}>Letter Index</ToggleButton>\r\n                        <ToggleButton size='sm' variant='dark' value={'customindex'}>Custom Index</ToggleButton>\r\n                    </ToggleButtonGroup>    \r\n                </span>\r\n            </div>);\r\n    }\r\n\r\n    changeDirectionality = (e) => {\r\n        this.setState({ directionality: e[1] });\r\n    }\r\n\r\n    changeGraphWeight = (e) => {\r\n        this.setState({ graphWeight: e[1] });\r\n    }\r\n\r\n    changeindexType= (e) => {\r\n        this.setState({ indexType: e[1] });\r\n    }\r\n}\r\n \r\nexport default graphSettings;","C:\\Users\\kevin\\OneDrive\\Desktop\\CS\\graphs\\src\\components\\graphData\\graphData.js",["36","37"],{"ruleId":"38","replacedBy":"39"},{"ruleId":"40","replacedBy":"41"},{"ruleId":"42","severity":1,"message":"43","line":3,"column":24,"nodeType":"44","messageId":"45","endLine":3,"endColumn":28},{"ruleId":"42","severity":1,"message":"46","line":3,"column":30,"nodeType":"44","messageId":"45","endLine":3,"endColumn":34},{"ruleId":"42","severity":1,"message":"47","line":3,"column":50,"nodeType":"44","messageId":"45","endLine":3,"endColumn":54},{"ruleId":"42","severity":1,"message":"48","line":2,"column":10,"nodeType":"44","messageId":"45","endLine":2,"endColumn":16},{"ruleId":"42","severity":1,"message":"49","line":2,"column":18,"nodeType":"44","messageId":"45","endLine":2,"endColumn":29},{"ruleId":"42","severity":1,"message":"50","line":3,"column":17,"nodeType":"44","messageId":"45","endLine":3,"endColumn":24},{"ruleId":"42","severity":1,"message":"51","line":5,"column":8,"nodeType":"44","messageId":"45","endLine":5,"endColumn":21},"no-native-reassign",["52"],"no-negated-in-lhs",["53"],"no-unused-vars","'Rect' is defined but never used.","Identifier","unusedVar","'Text' is defined but never used.","'Star' is defined but never used.","'Button' is defined but never used.","'ButtonGroup' is defined but never used.","'TabPane' is defined but never used.","'GraphSettings' is defined but never used.","no-global-assign","no-unsafe-negation"]